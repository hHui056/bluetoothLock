package db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import db.bean.Device;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TABLE_DEVICES".
*/
public class DeviceDao extends AbstractDao<Device, String> {

    public static final String TABLENAME = "TABLE_DEVICES";

    /**
     * Properties of entity Device.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Device_id = new Property(0, String.class, "device_id", true, "DEVICE_ID");
        public final static Property Device_name = new Property(1, String.class, "device_name", false, "DEVICE_NAME");
        public final static Property LastConnectTime = new Property(2, java.util.Date.class, "lastConnectTime", false, "LAST_CONNECT_TIME");
    }


    public DeviceDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TABLE_DEVICES\" (" + //
                "\"DEVICE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: device_id
                "\"DEVICE_NAME\" TEXT," + // 1: device_name
                "\"LAST_CONNECT_TIME\" INTEGER);"); // 2: lastConnectTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TABLE_DEVICES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Device entity) {
        stmt.clearBindings();
 
        String device_id = entity.getDevice_id();
        if (device_id != null) {
            stmt.bindString(1, device_id);
        }
 
        String device_name = entity.getDevice_name();
        if (device_name != null) {
            stmt.bindString(2, device_name);
        }
 
        java.util.Date lastConnectTime = entity.getLastConnectTime();
        if (lastConnectTime != null) {
            stmt.bindLong(3, lastConnectTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Device entity) {
        stmt.clearBindings();
 
        String device_id = entity.getDevice_id();
        if (device_id != null) {
            stmt.bindString(1, device_id);
        }
 
        String device_name = entity.getDevice_name();
        if (device_name != null) {
            stmt.bindString(2, device_name);
        }
 
        java.util.Date lastConnectTime = entity.getLastConnectTime();
        if (lastConnectTime != null) {
            stmt.bindLong(3, lastConnectTime.getTime());
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Device readEntity(Cursor cursor, int offset) {
        Device entity = new Device( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // device_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // device_name
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)) // lastConnectTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Device entity, int offset) {
        entity.setDevice_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDevice_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLastConnectTime(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Device entity, long rowId) {
        return entity.getDevice_id();
    }
    
    @Override
    public String getKey(Device entity) {
        if(entity != null) {
            return entity.getDevice_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Device entity) {
        return entity.getDevice_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
